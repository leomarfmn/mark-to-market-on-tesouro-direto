## TABLE OF CONTENTS

# ------ 1. IMPORTS
# ------ 2. FUNCTIONS, CONSTANTS AND PAGE SETTINGS
# ------ 3. SIDEBAR
# ------ 4. "HOME" PAGE
# ------ 5. "TEORIA" PAGE
# ------ 6. "SIMULA√á√ÉO" PAGE
    # ------ 6.1. SIDEBAR ON "SIMULA√á√ÉO" PAGE
    # ------ 6.2. HEADERS ON "SIMULA√á√ÉO" PAGE
    # ------ 6.3. DATE CHECK AND CONTENT CREATION
        # ------ 6.3.1. SIMULATION VARIABLES
        # ------ 6.3.2. DATAFRAME VALUES
        # ------ 6.3.3. TESOURO DIRETO VALUES ON DATAFRAME
        # ------ 6.3.4. PAGE LAYOUT
        # ------ 6.3.5. ADJUSTS DATA AND CREATES BARPLOT DATAFRAME
        # ------ 6.3.6. FIRST COLUMN CONTENT
        # ------ 6.3.7. CONTAINER 2 CONTENT
        # ------ 6.3.8. CONTAINER 3 CONTENT
        # ------ 6.3.9. FOOTER NOTES
# ------ 7. HIDE STREAMLIT STYLE



# ------ 1. IMPORTS
import numpy          as np
import pandas         as pd
import streamlit      as st
import plotly.express as px
import datetime



# ------ 2. FUNCTIONS, CONSTANTS AND PAGE SETTINGS
st.set_page_config(layout="wide")

@st.cache
def get_data():
    df = pd.read_csv('df.csv', usecols= ['T√çTULO', 'TAXA', 'VALOR M√çNIMO', 'VALOR T√çTULO', 'VENCIMENTO'])
    df['VENCIMENTO'] = df['VENCIMENTO'].apply(lambda x: x.split('-')[2] + '/' + x.split('-')[1] + '/' + x.split('-')[0] )
    df['T√çTULO'] = df['T√çTULO'].apply(lambda x: 'flag' if 'selic' in str.lower(x) else (x if 'juros' not in str.lower(x) else 'flag'))
    df = df[df['T√çTULO'] != 'flag']
    return df

def calculo_de_rendimento(taxa, x):
    return (((taxa / 100) + 1) ** x)

def format_date(data):
    return datetime.datetime.strptime(data, '%d/%m/%Y').date()

def date_diff(a, b):
    return np.busday_count(a, b)

def show_github():
    with st.sidebar:
        st.success('Conhe√ßa o c√≥digo fonte:  \n https://github.com/leomarfmn/mark-to-market-on-tesouro-direto')
    return None

TR = 0.00048
df = get_data()



# ------ 3. SIDEBAR
with st.sidebar:
    page = st.radio(
        "Explore",
        ("Home", "Teoria", "Simula√ß√µes")
    )



# ------ 4. "HOME" PAGE
if (page == "Home"):
    st.title('Marca√ß√£o a mercado no Tesouro Direto')
    st.subheader('T√≠tulos dispon√≠veis* para simula√ß√£o**')
    st.write('Escolha uma op√ß√£o ao lado (Teoria ou Simula√ß√µes) para continuar.')
    st.table(df.set_index('T√çTULO'))
    st.write('''<p1 style="font-size: small" style="text-align: left;">
                *Foram listados acima apenas os t√≠tulos vendidos direto pelo portal do tesouro direto e com rendimento atrelado ao IPCA ou prefixados.</p1>''',unsafe_allow_html=True)
    st.write('''<p1 style="font-size: small" style="text-align: left;">
                **N√£o √© recomenda√ß√£o de investimento. A ferramenta deve ser utilizada apenas para c√°lculos sem compromisso.</p1>''',unsafe_allow_html=True)
    show_github()



# ------ 5. "TEORIA" PAGE
elif (page == "Teoria"):
    st.title('O que √© marca√ß√£o a mercado?')
    st.write('Ainda que os t√≠tulos p√∫blicos, "prometam" uma taxa de rentabilidade na hora da compra, essas taxas flutuam e, com elas, o valor dos investimentos. Marca√ß√£o a mercado √© a atualiza√ß√£o dos valores de um investimento com base nas flutua√ß√µes das taxas. Em outras palavras, √© o valor de resgate do investimento, caso esse seja feito antes do seu vencimento.')
    st.write('Essa varia√ß√£o, por si s√≥, n√£o √© necessariamente algo positivo ou negativo. Depende do investidor entender como e porqu√™ essas flutua√ß√µes ocorrem e agir de acordo com o que faz mais sentido.')
    st.write('√â principalmente por isso que os t√≠tulos p√∫blicos, ainda que possibilitando o resgate di√°rio, n√£o s√£o recomendados de forma uniforme ao p√∫blico. Um resgate antecipado por necessidade por trazer grandes perdas ao investidor, bem como um resgate planejado pode assimilar ganhos extraordin√°rios.')
    st.subheader('Aprenda mais nos v√≠deos abaixo:')
    container1 = st.container()
    col1, col2 = container1.columns(2)
    with col1:
        st.video('https://www.youtube.com/watch?v=BUnpkmVIwgo')
        st.video('https://www.youtube.com/watch?v=WTKueE2P_Vk')
    with col2:
        st.video('https://www.youtube.com/watch?v=ll7EB32XM_g')
        st.video('https://www.youtube.com/watch?v=wQqFypK4o4A')
    show_github()



# ------ 6. "SIMULA√á√ÉO" PAGE
else: 


    # ------ 6.1. SIDEBAR ON "SIMULA√á√ÉO" PAGE
    with st.sidebar:
        titulo = st.selectbox('Selecione o t√≠tulo',(df['T√çTULO']))
        valor_investido = st.number_input('Insira o valor em reais para a simula√ß√£o', min_value=0, value=1000)
        data_resgate = st.date_input(
                                     "Selecione a data de resgate antecipada (ano/m√™s/dia)",datetime.datetime.today() + datetime.timedelta(365), max_value = datetime.date(2100,12,1))
        selic = st.slider('Escolha a taxa SELIC para o per√≠odo (%)', 2.0, 18.0, 7.5, step = 0.25)
        ipca = st.slider('Escolha o IPCA m√©dio para o per√≠odo (%)', 0.0, 15.0, 6.0, step = 0.25)
        if ('PREFIXADO' in titulo): 
            taxa_resgate = st.slider('Escolha a taxa prefixada no momento do resgate', 6.0, 20.0, 11.0, step = 0.25)
        else:
            taxa_resgate = st.slider('Escolha a taxa prefixada no momento do resgate', 2.0, 9.0, 5.0, step = 0.25)
        st.info('Para mais informa√ß√µes sobre a taxa SELIC, visite: https://www.bcb.gov.br/controleinflacao/taxaselic')
        st.info('Para mais informa√ß√µes sobre o IPCA, visite: https://www.bcb.gov.br/controleinflacao/indicepreco')


    # ------ 6.2. HEADERS ON "SIMULA√á√ÉO" PAGE
    st.title('Simula√ß√£o')
    st.subheader('T√≠tulo escolhido:')
    df_show = df[df['T√çTULO'] == titulo].set_index('T√çTULO')
    st.table(df_show)


    # ------ 6.3. DATE CHECK AND CONTENT CREATION
    data_vencimento = df[df['T√çTULO'] == titulo]['VENCIMENTO'].tolist()[0]
    if (data_resgate > format_date(data_vencimento)):
        st.error("Escolha uma data menor que a data de vencimento do t√≠tulo.")
    else:

        # ------ 6.3.1. SIMULATION VARIABLES
        today = datetime.date.today()
        periodo = pd.date_range(today, data_resgate, freq='D').strftime("%Y-%m-%d").tolist()
        rendimentos = pd.DataFrame({'Data':periodo})
        valor_titulo = float(df[df['T√çTULO'] == titulo]['VALOR T√çTULO'].tolist()[0].split(' ')[1].replace('.', '').replace(',','.'))
        numero_de_titulos = valor_investido / valor_titulo


        # ------ 6.3.2. DATAFRAME VALUES
        rendimentos['Intervalo de tempo'] = rendimentos['Data'].apply(lambda x: 
                                                                      len(pd.date_range(today, x, freq = 'D').tolist())/365)
        rendimentos['Poupan√ßa'] = rendimentos['Intervalo de tempo'].apply(lambda x: 
                                                                          valor_investido * ((1.005 ** 12 + 0.00048) ** x) if selic >= 8.5 
                                                                          else valor_investido * ((selic * 0.7) / 100 + 1 + 0.00048) ** x)
        rendimentos['SELIC'] = rendimentos['Intervalo de tempo'].apply(lambda x: 
                                                                       valor_investido * calculo_de_rendimento(selic, x))
        rendimentos['Infla√ß√£o (IPCA)'] = rendimentos['Intervalo de tempo'].apply(lambda x: 
                                                                                 valor_investido * calculo_de_rendimento(ipca, x))
        
        # ------ 6.3.3. TESOURO DIRETO VALUES ON DATAFRAME
        if ('PREFIXADO' in titulo):
            taxa_contratada = float(df[df['T√çTULO'] == titulo]['TAXA'].tolist()[0].replace(',','.').replace('%', ''))
            rendimentos['Tesouro direto (te√≥rico)'] = rendimentos['Intervalo de tempo'].apply(lambda x: valor_investido * calculo_de_rendimento(taxa_contratada, x))
            rendimentos['Tesouro direto (real)'] = rendimentos['Data'].apply(lambda x: numero_de_titulos * (1000 / ( 1 + taxa_resgate / 100) ** (date_diff(x, format_date(data_vencimento)) / 252)))
        else:
            taxa_contratada = float(df[df['T√çTULO'] == titulo]['TAXA'].tolist()[0].split(' ')[2].replace(',','.').replace('%', ''))
            dias_da_compra_ate_vencimento = date_diff(today, format_date(data_vencimento))
            dias_do_resgate_ate_vencimento = date_diff(data_resgate, format_date(data_vencimento))
            percentual_do_vna_inicial = 100 / ((1 + taxa_contratada / 100) ** (dias_da_compra_ate_vencimento / 252)) / 100
            percentual_do_vna_final = 100 / ((1 + taxa_resgate / 100) ** (dias_do_resgate_ate_vencimento / 252)) / 100
            vna_inicial = valor_titulo / percentual_do_vna_inicial
            rendimentos['Tesouro direto (te√≥rico)'] = rendimentos['Intervalo de tempo'].apply(lambda x: valor_investido * (((ipca / 100 + 1) * (taxa_contratada / 100 + 1)) ** x))
            rendimentos['Tesouro direto (real)'] = rendimentos['Intervalo de tempo'].apply(lambda x: numero_de_titulos * percentual_do_vna_final * vna_inicial * (1 + ipca / 100) ** x)

        
        # ------ 6.3.4. PAGE LAYOUT
        container1 = st.container()
        col1, col2 = container1.columns([1, 3])
        container2 = col2.container()
        container3 = col2.container()
        tab1, tab2 = container3.tabs(["üìà Gr√°fico", "üóÉ Dados"])

        
        # ------ 6.3.5. ADJUSTS DATA AND CREATES BARPLOT DATAFRAME
        rendimentos.drop(['Intervalo de tempo'], axis = 1 , inplace=True)
        data_resgate = datetime.datetime.strftime(data_resgate, '%Y-%m-%d')
        df_barplot = rendimentos[rendimentos['Data'] == data_resgate][['Poupan√ßa', 'SELIC', 'Infla√ß√£o (IPCA)', 'Tesouro direto (te√≥rico)', 
                                                                        'Tesouro direto (real)']].astype(str).T.reset_index()
        df_barplot.columns = ['Compara√ß√£o','valor']
        df_barplot['valor'] = df_barplot['valor'].apply(lambda x: ((float(x) / valor_investido) - 1 ) * 100)
        df_barplot['valor_str'] = df_barplot['valor'].map('{:,.2f}%'.format)

        
        # ------ 6.3.6. FIRST COLUMN CONTENT
        with col1:
            data_resgate = data_resgate.split('-')[2] + '/' + data_resgate.split('-')[1] + '/' + data_resgate.split('-')[0]
            st.markdown("<h3 style='text-align: center;'>""</h3>", unsafe_allow_html=True) #Empty line
            st.markdown("<h3 style='text-align: center;'>""</h3>", unsafe_allow_html=True) #Empty line
            st.markdown("<h3 style='text-align: center;'>Dados da simula√ß√£o:</h3>", unsafe_allow_html=True)
            st.text("") #Empty line
            st.write(
                    """
                    -   T√≠tulo selecionado: {}
                    -   Valor investido: R$ {:.2f}
                    -   Data de resgate: {}
                    -   Taxa SELIC escolhida: {}%
                    -   Taxa IPCA escolhida: {}%
                    -   Taxa prefixada escolhida: {}%
                    """.format(titulo.capitalize(), valor_investido, data_resgate, str(selic), str(ipca), str(taxa_resgate)))
            st.text("") #Empty line
            st.text("") #Empty line
            st.markdown("<h3 style='text-align: center;'>Interpreta√ß√£o dos resultados**</h3>", unsafe_allow_html=True)
            st.text("") #Empty line
            st.write('<p style="text-align: left;">Os valores calculados devem ser lidos como resposta √†s perguntas:</p>', unsafe_allow_html=True)
            st.write('''
                    -   Qual seria o total resgatado se R$ {} fossem deixados nesse investimento at√© {}?
                    -   Qual a varia√ß√£o da infla√ß√£o e da SELIC durante esse per√≠odo?"
                    '''.format(int(valor_investido), data_resgate))
            st.write('<p style="text-align: left;">Assim, a simula√ß√£o indica que, na poupan√ßa, o dinheiro renderia {}. J√° no tesouro direto, o rendimento seria de {} por conta da marca√ß√£o a mercado e do resgate antecipado. Caso fosse deixado at√© o vencimento, pode-se considerar um rendimento t√©orico no tesouro direto de {} em {}.</p>'
                    .format(df_barplot[df_barplot['Compara√ß√£o'] == 'Poupan√ßa']['valor_str'].tolist()[0],
                    df_barplot[df_barplot['Compara√ß√£o'] == 'Tesouro direto (real)']['valor_str'].tolist()[0], 
                    df_barplot[df_barplot['Compara√ß√£o'] == 'Tesouro direto (te√≥rico)']['valor_str'].tolist()[0], 
                    data_resgate), 
                    unsafe_allow_html=True)
            st.write('<p style="text-align: left;">Ademais, durante esse per√≠odo, a infla√ß√£o avan√ßar√° {} e a SELIC {}.</p>'
                    .format(df_barplot[df_barplot['Compara√ß√£o'] == 'Infla√ß√£o (IPCA)']['valor_str'].tolist()[0],
                    df_barplot[df_barplot['Compara√ß√£o'] == 'SELIC']['valor_str'].tolist()[0]), 
                    unsafe_allow_html=True)

        
        # ------ 6.3.7. CONTAINER 2 CONTENT
        fig = px.line(rendimentos, x='Data', y=['Poupan√ßa', 'SELIC', 'Infla√ß√£o (IPCA)', 'Tesouro direto (te√≥rico)', 'Tesouro direto (real)'], labels = {'Data' : 'Data de resgate', 'value' : 'Valor de resgate  /  Varia√ß√£o (R$)', 'variable' : 'Vari√°vel'}, hover_data={'Data' : False})
        fig.update_layout(hovermode="x unified", title = {'text' : 'Varia√ß√£o do retorno com o tempo','xanchor': 'left'})
        container2.plotly_chart(fig, use_container_width=True)

        
        # ------ 6.3.8. CONTAINER 3 CONTENT
        fig = px.bar(df_barplot, x='Compara√ß√£o', y = 'valor', text = 'valor_str', labels = {'valor' : 'Rendimento  /  Varia√ß√£o (%)'},hover_data= {'Compara√ß√£o': False, 'valor' : False, 'valor_str' : False})
        fig.update_layout(title = {'text' : 'Expectativa percentual do retorno','xanchor': 'left'})
        tab1.plotly_chart(fig, use_container_width=True)
        df_show = df_barplot[['Compara√ß√£o', 'valor_str']].set_index('Compara√ß√£o')
        df_show.columns = ['Valor']
        tab2.table(df_show)
        
        
        # ------ 6.3.9. FOOTER NOTES
        st.text("") #Empty line
        st.write('''<p1 style="font-size: small" style="text-align: left;">
                *N√£o √© recomenda√ß√£o de investimento. A ferramenta deve ser utilizada apenas para c√°lculos sem compromisso.</p1>''',unsafe_allow_html=True)
        st.write('''<p1 style="font-size: small" style="text-align: left;">
                **Os resultados mostrados s√£o brutos de imposto de renda e aproximados por conta do c√°lculo de dias √∫teis. Al√©m disso, n√£o consideram a taxa de cust√≥dia da B3 ou taxas das corretoras.</p1>''',unsafe_allow_html=True)
        


# ------ 7. HIDE STREAMLIT STYLE
hide_st_style = '''
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                </style>    
                ''' 
st.markdown(hide_st_style, unsafe_allow_html=True)                